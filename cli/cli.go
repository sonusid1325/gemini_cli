package cli

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"gemini/ai"

	"github.com/charmbracelet/glamour"
	"github.com/charmbracelet/huh"
	"github.com/charmbracelet/lipgloss"
)

func Init(apiKey string) {
	var text string

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewInput().
				Title("prompt").
				Value(&text),
		),
	)

	err := form.Run()
	if err != nil {
		log.Fatal(err)
	}

	if strings.ToLower(text) == "bye" {
		fmt.Println("Goodbye!")
		os.Exit(0)
	}

	ctx := context.Background()

	response, err := ai.GenerateContent(ctx, apiKey, text)
	if err != nil {
		log.Fatal("Error generating content:", err)
	}

	if len(response.Candidates) == 0 || len(response.Candidates[0].Content.Parts) == 0 {
		log.Fatal("No content generated by Gemini API.")
	}

	generatedText := response.Candidates[0].Content.Parts[0].Text
	lines := strings.Split(generatedText, "\n")

	if len(lines) > 0 {
		lines = lines[:len(lines)-1]
	}

	trimmedGeneratedText := strings.Join(lines, "\n")

	textStyle := lipgloss.NewStyle().Foreground(lipgloss.Color("#7571f9"))

	renderedOutput, err := glamour.Render(trimmedGeneratedText, "dark")

	if err != nil {
		log.Fatal("Error rendering output with glamour:", err)
	}
	outputLines := strings.Split(renderedOutput, "\n")

	if len(outputLines) > 2 {
		outputLines = outputLines[:len(outputLines)-1]
	}

	trimmedRenderedOutput := strings.Join(outputLines, "\n")

	fmt.Println(textStyle.Render("response"))

	borderedOutput := lipgloss.NewStyle().
		Border(lipgloss.NormalBorder(), true, false, true, false).
		BorderForeground(lipgloss.Color("#ff85b8")).
		Render(trimmedRenderedOutput)

	fmt.Println(borderedOutput)
}
