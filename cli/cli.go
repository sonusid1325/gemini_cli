package cli

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"gemini/ai"

	"github.com/charmbracelet/huh"
	"github.com/charmbracelet/lipgloss"
	"golang.org/x/term"
)

func Init(apiKey string) {
	var text string

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewInput().
				Title("prompt").
				Value(&text),
		),
	)

	err := form.Run()
	if err != nil {
		log.Fatal(err)
	}

	if strings.ToLower(text) == "bye" {
		fmt.Println("Goodbye!")
		os.Exit(0)
	}

	width, _, err := term.GetSize(int(os.Stdout.Fd()))
	if err != nil {
		log.Println("Error getting terminal size:", err)
		width = 80
	}
	ctx := context.Background()

	response, err := ai.GenerateContent(ctx, apiKey, text)
	if err != nil {
		log.Fatal("Error generating content:", err)
	}

	if len(response.Candidates) == 0 || len(response.Candidates[0].Content.Parts) == 0 {
		log.Fatal("No content generated by Gemini API.")
	}

	generatedText := response.Candidates[0].Content.Parts[0].Text
	lines := strings.Split(generatedText, "\n")

	if len(lines) > 0 {
		lines = lines[:len(lines)-1]
	}

	trimmedGeneratedText := strings.Join(lines, "\n")

	style := lipgloss.NewStyle().
		BorderStyle(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("#FF69B4")).
		Padding(1, 2).
		Width(width / 2)

	fmt.Print("Thinking...\n")

	textStyle := lipgloss.NewStyle().Foreground(lipgloss.Color("#7571f9"))

	output := fmt.Sprintf("%s\n%s", textStyle.Render("Gemini:"), trimmedGeneratedText)
	borderedOutput := style.Render(output)

	fmt.Println(borderedOutput)
}
